/*
 * Generated on 2025-09-17T05:28:47.414198087Z
 *
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

group = "neo"
project.ext.name = "CFHTEphemerides"
project.ext.version = "1.1.1"
project.ext.confVersion = "1.0"
project.ext.description = "NEO Project: Java rewrite of Downloader.py and cfht_ephemeris.py"
project.ext.mainClass = "neo.cfht.app.CFHTEphemerides"
project.ext.specificationVersion = "undefined" // see NEOProjectDevelopment
project.ext.release = ""

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// Required for github
compileJava {
    options.compilerArgs << '-encoding' << 'utf8'
}

configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency
    // (group and name are equal)
    // failOnVersionConflict()
  }
}

test {
    jvmArgs("-Xmx2G")
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport // report is always generated after tests run
}

dependencies {
    // Maven compile dependencies
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'ch.qos.logback:logback-core:1.2.3'
        implementation 'com.google.code.gson:gson:2.8.6'
        implementation 'com.sun.mail:javax.mail:1.6.2'
        implementation 'gov.nasa.gsfc.heasarc:nom-tam-fits:1.15.2'
        implementation 'info.picocli:picocli:4.5.1'
        implementation 'javax.servlet:javax.servlet-api:3.1.0'
        implementation 'javax.xml.bind:jaxb-api:2.3.0'
        implementation 'org.apache.commons:commons-math3:3.6.1'
        implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
        implementation 'org.hibernate:hibernate-core:5.4.10.Final'
        implementation 'org.hibernate:hibernate-entitymanager:5.4.10.Final'
        implementation 'org.hibernate:hibernate-hikaricp:5.4.10.Final'
        implementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        implementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
        implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'
        implementation 'org.postgresql:postgresql:42.2.9'
        implementation 'org.xerial:sqlite-jdbc:3.28.0'


    // Maven NeoProject dependencies
        implementation project(':NEOCore')



    // Dependency for test framework
    // Maven test dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
        testImplementation 'org.junit.platform:junit-platform-commons:1.7.0'


}

tasks.register('setRelease') {
  doLast {
    new ByteArrayOutputStream().withStream { os ->
      def result = exec {
        commandLine 'git describe'
        standardOutput = os; 
      }
      project.ext.release = os.toString()
    }
  }
}

jar {
    manifest {
        attributes("Implementation-Title": project.ext.name,
                   "Implementation-Version": project.ext.version,
                   "Specification-Version": project.ext.confVersion,
                   "Main-Class": project.ext.mainClass,
                   "SCM-Version": project.ext.release
                   )
    }
    archiveBaseName = project.ext.name + "-" + project.ext.version
}

tasks.register('sourcesJar',Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar',Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.register('testJar', Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output + sourceSets.test.allSource
}

artifacts {
    archives sourcesJar
    // archives javadocJar // Commented out: Fails if Javadoc non strictly compliant
}

// Build a jar aggregating all jars
// Fails if there is no project.ext.mainClass or no project.ext.specVersion
tasks.register('fatJar', Jar) {
    dependsOn compileJava, sourcesJar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes ("Implementation-Title": project.ext.name,
                   "Implementation-Version": project.ext.version,
                   "Specification-Version": project.ext.confVersion,
                   "Main-Class": project.ext.mainClass,
                   "SCM-Version": project.ext.release
                   )
    }
    archiveBaseName = project.ext.name + "-" + project.ext.version
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = group
			artifactId = project.ext.name
			version = project.ext.version
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = project.ext.name
				description = project.ext.description
				url = 'https://panstarrs.atlassian.net/l/cp/5hU8S0R1'
				properties = [
					"prop.with.dots": "anotherValue"
				]
				developers {
					developer {
						id = 'fairlamb'
						name = 'John Fairlamb'
						email = 'ps-mops-ops@hawaii.edu'
					}
				}
				scm {
					url = 'https://panstarrs.atlassian.net/l/cp/5hU8S0R1'
				}
			}
		}
	}
	repositories {
	}
}

jacocoTestReport {
    dependsOn test
}